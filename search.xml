<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的转码之路-01 从憎恶代码开始</title>
      <link href="/2024/04/01/%E6%88%91%E7%9A%84%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF-01-%E4%BB%8E%E6%86%8E%E6%81%B6%E4%BB%A3%E7%A0%81%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/04/01/%E6%88%91%E7%9A%84%E8%BD%AC%E7%A0%81%E4%B9%8B%E8%B7%AF-01-%E4%BB%8E%E6%86%8E%E6%81%B6%E4%BB%A3%E7%A0%81%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>今天，弹琴时发现自己的音乐学习之旅又遇到瓶颈了，而这次的瓶颈很可能需要通过一种我都不曾意料到的方式解决————写歌词。其实未必要写多么押韵的歌词，而是要把情感确定了，现有情感再去写歌表达，而非以往的先写歌然后赋予情感。当然不提前后方法的正确性，总之我需要再次发掘感情了，可能是之前忙着找实习被磨灭了不少内心的热情。</p><p>于是干脆写一个回忆，关于我的转码之路的。在我看来，这是一条艰难却又是我必然选择的路。即使我被坑着直博再读五年数学，我估计直博期间或者毕业后还是要转码。而我的经历或许也能给一些和我有着类似想法的人提供一些参考，如果我在去年现在能得到这些参考，那么我也或许能少走一些弯路。对自己有益，对他人也有益，为何不写呢？</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="我的转码之路-01"><a href="#我的转码之路-01" class="headerlink" title="我的转码之路 - 01"></a>我的转码之路 - 01</h2><h3 id="我的第一，二，三次写代码的经历"><a href="#我的第一，二，三次写代码的经历" class="headerlink" title="我的第一，二，三次写代码的经历"></a>我的第一，二，三次写代码的经历</h3><p>不同于一些年少成名的天才，我接触代码的时间不早，而且我一开始对代码没有表露出任何的兴趣。第一次写代码是在小学高年级的微机课上，当时教的是pascal。但是我一句都不会写，作业全靠抄，课上电脑被控制时就和同学聊天或者玩，电脑不被控制了就打游戏。</p><p>我第二次写代码是初中，同样微机课，不过教授内容变成了c++。而我也有了变化，那就是我打游戏的时间有所减少，多出来的时间用于————听歌了。没错，我还是一点c++都不会写，作业全靠抄，因为不知道写代码有什么用。</p><p>第三次写代码是大一，上一门叫程序设计基础的课。这门课必须认真上了，为了不挂科。于是我就开始认真学，然后上这门课前暑假里其实看了一点c++（之后会讲为什么看），但是水平属于只会写个循环。然后这门课名叫程设基础，每节课就讲一些基础的算法，比如 dfs bfs dp 之类的。然后上课1+1作业微积分这样。我每次写的很痛苦，只能向一个很强的舍友请教（这哥们水平极强，去打力扣周赛估计认真点可以较稳拿到全球前十），当时写个最基础的二分都要写好久，每次交作业那天12：00我都在继续写，太痛了。于是我对代码唯一有的一丝丝热情直接无了（这里的热情出现的更早，不过之后再讲）。</p><p>除了难度不小的平时作业，这门课还有个大作业。大作业是要我们写一个类似matlab画图函数的功能，给函数表达式输出图像bmp。基础要求是2d，进阶要求是3d，但是完全没告诉我们怎么画3d的。而讲大作业的第一节课在讲如何用c++生成bmp文件，比如格式头，内容等，但是当时我听了一节课不知道什么是bmp。。。上完课去问什么是bmp，才发现，哦这是个图片格式啊。结局自然是2d和3d的都不会画，只能靠组里的两个好兄弟帮忙，我写一些更简单的（比如画坐标系）来写。</p><p>最后，考试有60分的送分题（真的就是写个循环就行），剩下的估计是力扣周赛3和4题的难度。我直接傻眼了，做完60分开始呆坐。</p><p>虽然这门课靠着组员认真做大作业拿了A-，但我上完课的感想只是：以后再也不碰代码了。</p><p>所以，这便是我转码之前对代码的印象：复杂，令人痛苦的玩意。</p><p>那我为什么又走上了转码之路呢？欲知后事如何，请看下回分解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经历分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serum合成器基础3-采样形变</title>
      <link href="/2024/03/30/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%803-%E9%87%87%E6%A0%B7%E5%BD%A2%E5%8F%98/"/>
      <url>/2024/03/30/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%803-%E9%87%87%E6%A0%B7%E5%BD%A2%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Serum合成器教程系列"><a href="#Serum合成器教程系列" class="headerlink" title="Serum合成器教程系列"></a>Serum合成器教程系列</h1><p>本文标题的采样形变，指的是对波形进行直接变换。不同于减法合成，我们直接对波形进行变化。除了一些复制，翻转，缩变，我们还可以使用fm和am方法。</p><p>这部分的原理挺复杂的，特别是FM，我觉得可以去youtube找几个视频看一看，或者上reddit，比如有一些链接可以参考。（我自己之前看了几遍都没看懂…最近主业稍微可以闲一下，抱着好心情去认真看才看懂一些）如果暂时看不懂，很正常，以后心情好了再来看就行了。</p><p><a href="https://www.reddit.com/r/edmproduction/comments/5vdmc5/can_anyone_help_me_understand_fm_synthesis/">reddit回答帖</a></p><p><a href="https://synthesizeracademy.com/fm-synthesis/">带声音示范的文章</a></p><h3 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h3><ol><li>sync no window 调整波形 看上去和频率调控很类似，区别在于 pitch 是直接改变波形音调，而 sync 是强制在频率里每次刷新重新播放波形，比如 2.5 的 110hz 的 A 就是每分钟刷新 110 次，每次里先两次波形再一次半波形</li><li>sync 1&#x2F;2 window 对边缘做平滑 听起来更加 blurred 比如说没有一些呲呲的电子杂音</li><li>sync window 整个做平滑</li></ol><h3 id="Bend-和-PWM"><a href="#Bend-和-PWM" class="headerlink" title="Bend 和 PWM"></a>Bend 和 PWM</h3><ol><li>bend 扭曲波形，加是让函数（取绝对值后）向两边靠，减是向中间</li><li>bend 让低频高频都能听到，用来做 bass 好像很好</li><li>PWM 控制波形宽度 不过这玩意有啥用。。。</li></ol><h3 id="Asym-和-Flip"><a href="#Asym-和-Flip" class="headerlink" title="Asym 和 Flip"></a>Asym 和 Flip</h3><ol><li>asym 反对称 类似 bend，但是 bend 是中间向两边，asym 是一边向另一边 au5 说自己更喜欢 asym 相对于 bend</li><li>flip 上下翻转 flip 范围内的波形 到中间完全反转 到最右边返回初始</li></ol><h3 id="Mirror-和-Quantize"><a href="#Mirror-和-Quantize" class="headerlink" title="Mirror 和 Quantize"></a>Mirror 和 Quantize</h3><ol><li>mirror 中间做对称 处于中间时正好是原本波形对称 向左右时是拉伸对称部分</li><li>quantize 是降采样 有点类似马赛克滤镜，给人 pixel 的感觉 或者说 99 game boy 的感觉（另一个课程 instructor 的评价）</li></ol><h3 id="FM-AM-RM"><a href="#FM-AM-RM" class="headerlink" title="FM AM RM"></a>FM AM RM</h3><ol><li>fm 频率调控</li><li>am 是调控波形的音量 负的就是减声</li><li>rm 如果正中间就是 am 如果拉满则是负数对应反转</li></ol><h3 id="Remap"><a href="#Remap" class="headerlink" title="Remap"></a>Remap</h3><ol><li>自己画图来做 fm&#x2F;am，实验时可以拿 saw（波形是直线的 basic shape）来做，更直观一些</li><li>初始时，斜率为 1，代表没有任何变化</li><li>remap 1，2，3，4 实质上差不多，数字代表 sync 数</li><li>remap 的 x 轴对应波形表的 x 轴，导数对应区间内频段的宽度</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 电子音乐制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serum合成器基础2-主面板</title>
      <link href="/2024/03/30/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%802-%E4%B8%BB%E9%9D%A2%E6%9D%BF/"/>
      <url>/2024/03/30/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%802-%E4%B8%BB%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Serum合成器教程系列"><a href="#Serum合成器教程系列" class="headerlink" title="Serum合成器教程系列"></a>Serum合成器教程系列</h1><p>在介绍完serum基础，和产生声音的源头振荡器后，本篇介绍serum主面板上其他的功能，比如sub，noise这两个独特的音源，以及env和lfo这类合成器中的“函数”，以及一些其他功能。</p><p>当然，本篇还是没有讲完主面板中的全部内容，比如warp和filter。它们会在之后出现。</p><h3 id="sub-振荡器"><a href="#sub-振荡器" class="headerlink" title="sub 振荡器"></a>sub 振荡器</h3><ol><li>sub 技术上就是一个振荡器，不过有更少的可选参数</li><li>可用于给 bass 铺底</li><li>DIRECT OUT：如果开启，就是不经过各种 filter fx 等直接输出，比如铺地可能就想要它单独铺出来</li></ol><h3 id="noise-振荡器"><a href="#noise-振荡器" class="headerlink" title="noise 振荡器"></a>noise 振荡器</h3><ol><li>是一个采样器</li><li>可以将 wav 拖入 audio track，使用 ctrl e 做切割处理，然后切割好后保存新的 wav，再拖入 noise 的 wav，然后频率可能得改下防止变声</li><li>箭头：是否确定为 one-shot phase：起始点 random： phase 随机程度 pitch：音调 钢琴：是否跟着钢琴变调 如果钢琴被选中，那么 pitch 变化是 semitone；否则则是 percentage， 12% 是一个 octave</li></ol><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><ol><li>cutoff 控制频率 res 控制频率处形状 pan 左右 drive 和 fat 都是加音量 但是 drive 是 pre-filter saturation，fat 没有做 saturation，不会改变频率的（感觉？） 反正现在不太懂这是什么 之后再说吧 mix 也不太懂，还没学过混音 之后再说吧</li></ol><h3 id="Envelope-1"><a href="#Envelope-1" class="headerlink" title="Envelope 1"></a>Envelope 1</h3><ol><li>它（和其他下半板块的模块）本身不产生声音，但是对声音产生影响</li><li>是音量的结构</li><li>env1 负责整个 serum 的声音，由 adsr 控制</li><li>adsr 分别是什么？ a 是 attack，声音到最大的时长；d 是最高点下降到持续的时长；s 是下降并维持的音高；r 是释放后的停止时间 除此之外 serum 还有个 hold，代表最高处维持时间。其中 ahdr 都是横坐标的时长，s 是纵坐标的音高</li><li>拉曲线时还可以改变曲线形状</li></ol><h3 id="Envelope-2-3"><a href="#Envelope-2-3" class="headerlink" title="Envelope 2, 3"></a>Envelope 2, 3</h3><ol><li>env2 和 3 不控制整体音量，需要将它们 assign 到具体的 knob 才有影响</li><li>据 au5 说，他用 env1 基本只控制整体音量而不控制其他的</li><li>拉到 knob 上时，可以调控影响的 range，shift alt 点击 knob 切换成对称控制， 如果是负的则是逆时针（从指针开始到最远处），如果是对称，方向则根据 shift alt 对称前的方向（正 or 负）决定走向</li><li>一个 env 最多控制 32 个 knob，3 个 env 似乎是不太够的，于是之后还会有 lfo</li></ol><h3 id="LFO"><a href="#LFO" class="headerlink" title="LFO"></a>LFO</h3><ol><li>LFO 的最高点和最低点便是 lfo 的范围两端点，方向正负控制和上一节提到的控制方法一样</li></ol><h3 id="LFO-控制器"><a href="#LFO-控制器" class="headerlink" title="LFO 控制器"></a>LFO 控制器</h3><ol><li>rate 控制 lfo 周期时长</li><li>rise 渐进式的 lfo 启动 delay 时长结束再启动 lfo</li><li>smooth</li><li>bmp 跟着 daw 的 bpm 走还是跟着独立的数字频率</li><li>anchor 保证 rate 改变时 phase 也跟着改，为了确保 rate 变动时 lfo stay sync with beat 说实话这里没太懂</li><li>trip 在 rate 中添加更多的 subdivision 选择</li><li>dot 同上</li><li>off 每次新的开始地点都是上次的结尾</li><li>trig 总是从 lfo 最左边开始</li><li>env 让 lfo 不循环而只运行一次，像 envelope 一样</li><li>最多可以有 8 个 lfo</li><li>在曲线上双击增加点，可以拉曲线</li><li>按住 shift 直接画横线</li><li>grid 控制横线单元格数量</li><li>按住 alt shift，y 坐标也变成离散的</li><li>lfo 也可以读取和保存 preset</li><li>lfo rate 拉到最右 fast 速率是多少？ 据 au5 说可能是 512</li></ol><h3 id="Macro-和-mod"><a href="#Macro-和-mod" class="headerlink" title="Macro 和 mod"></a>Macro 和 mod</h3><ol><li>可以将 mod 的 knob 拉到别的上面，然后控制 mod 就是控制一大堆 knob</li><li>目的是将一大堆参数整合成一个 package 来做 mod</li><li>可以用键盘控制 mod</li></ol><h3 id="Voicing"><a href="#Voicing" class="headerlink" title="Voicing"></a>Voicing</h3><ol><li>mono 只能弹一个键</li><li>poly 可以同时弹的数量（超过的话取最近弹的三个） unison 的也算，不过 unison 变大，poly 上限也会变大 unison 拉满时最多是 1088</li><li>porta 音不够时转变的速率 curve 转变曲线</li><li>always 如果开了，那么 mono 下哪怕两个不同的音分开，它们也会连续转变；scaled 如果开了那么跳 2 个 sacle 时间比跳一个 scale 更长</li><li>legato 如果开了那么各种 lfo，env，mod 都会继续而非重新被 trigger</li></ol><h3 id="Pitch-bend-和右键选项"><a href="#Pitch-bend-和右键选项" class="headerlink" title="Pitch bend 和右键选项"></a>Pitch bend 和右键选项</h3><ol><li>pitch bend 翻译是弯音</li><li>两个上下界调整范围，大小没有要求上大下小，上小下大也可以</li><li>ctrl 左键 一个 knob 可以让它初始化 或者右键选择 reset control 也行</li><li>右键选择 mod source 可以避免 drag 因为有的可能是拖不到的比如 lfo 到另一个 lfo 的参数</li></ol><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ol><li>可以选择皮肤 不同皮肤带来的不同感觉可能真的会对创作有影响</li><li>可以放大 放大后分辨率提高还挺细致的</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 电子音乐制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地vs code c++环境配置</title>
      <link href="/2024/03/28/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0lt%20cpp%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/03/28/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0lt%20cpp%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统-本地-VS-Code-配置-C-环境"><a href="#Windows系统-本地-VS-Code-配置-C-环境" class="headerlink" title="Windows系统 本地 VS Code 配置 C++ 环境"></a>Windows系统 本地 VS Code 配置 C++ 环境</h1><h1 id="本地配置的目的"><a href="#本地配置的目的" class="headerlink" title="本地配置的目的"></a>本地配置的目的</h1><p>看到这个博客肯定就有人要问了：德同学你何苦要本地vs code配置c++环境呢？如果是大项目，好好的visual studio不用来用vs code，如果就是写点简单算法题，力扣网站直接刷不好吗，非要自讨麻烦。</p><p>实际上我以前就是这么想的，但是今天发现本地配置还是有意义的————因为要面试，然后发现可能要在本地跑代码，而visual studio每次打开都要不少时间，挺麻烦的，相比之下vs code好很多。而面试的时候可能并不会同意让你打开力扣当c++环境。</p><p>配置过程也不长，十五分钟的事。所以不妨配置一个，写起代码手感不得不说远超干巴巴的leetcode网页版。但之前就故意为了练这个没配…</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><h2 id="下载MINGW"><a href="#下载MINGW" class="headerlink" title="下载MINGW"></a>下载MINGW</h2><p>首先下载 MINGW， 看<a href="https://stackoverflow.com/questions/46455927/mingw-w64-installer-the-file-has-been-downloaded-incorrectly">这个帖子</a>里有图片的赞数最多的那个回答就够了。</p><p>实际上就是下载压缩包（<a href="https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-10.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64ucrt-10.0.0-r1.7z">地址</a>），解压后放到一个目录里，然后系统变量加一下。</p><p>搞完以后，cmd试试</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gcc --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出没问题就是安装好了。</p><h2 id="配置VS-Code"><a href="#配置VS-Code" class="headerlink" title="配置VS Code"></a>配置VS Code</h2><p>其实配置VS code的部分有一篇文章我觉得很好，那就是<a href="https://zhuanlan.zhihu.com/p/87864677">这篇</a>。它虽然讲安装的部分有些过时，但配置vs code的部分没有，直接参考它就行了。</p><p>概括而言，就是安装c++插件，配置编译器环境。</p><h2 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h2><p>正常来说我们已经可以跑c++程序了，比如最简单的Hello World：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是，当我们敲出vector, unordered_map, priority_queue等常用数据结构的时候发现底下都是红线，因为没有引入对应的依赖。于是我们稍作改动：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们就看可以自由使用各种数据结构了，面试时也可以直接打开vs code写c++。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作简单的chatbot</title>
      <link href="/2024/02/15/%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84chatbot/"/>
      <url>/2024/02/15/%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E7%9A%84chatbot/</url>
      
        <content type="html"><![CDATA[<h1 id="制作简单的-Chatbot"><a href="#制作简单的-Chatbot" class="headerlink" title="制作简单的 Chatbot"></a>制作简单的 Chatbot</h1><h1 id="Chatbot-是什么"><a href="#Chatbot-是什么" class="headerlink" title="Chatbot 是什么"></a>Chatbot 是什么</h1><p>Chatbot，聊天机器人。有各种各样的聊天机器人，用于不同的场景，比如网站上的机器客服就是一个例子。我最近还看到一个新闻，一个公司裁了 700&#x2F;3000 人工客服并使用 AI 克服替换，便是 Chatbot 的应用。</p><p>而我们也可以搭建各种各样的 Chatbot，比如搭建虚拟伴侣等。这篇文章中，我们便以搭建虚拟助手为例，搭建一个 chatbot 助手。</p><h1 id="Chatbot-的结构"><a href="#Chatbot-的结构" class="headerlink" title="Chatbot 的结构"></a>Chatbot 的结构</h1><p>Chatbot 的结构很简单，前端展示，后端服务，算法接口。</p><p>前端展示便是对话框，语音播放框之类的，可以使用 React 这样的框架实现；</p><p>后端服务便是前端调取的接口，负责业务逻辑，同时需要连接算法接口，可以使用 SpringBoot 或者 Python Flask 等实现；</p><p>算法接口，这个是最难的，但是我们先不考虑自己训练 AI 模型，我们采用简单一些的办法，那就是调用一些付费或者开源的大模型接口，并采用 prompt engineering 来生成指令。</p><p>本篇文章出于方便，就直接使用 python gradio 搭建 chatbot 了，它可以直接调用代码生成前端网页，gradio 库也有 chatbot 的组件，支持文字，语音等。我们的后端逻辑用 python 写也非常方便。</p><p>而算法接口，我们就使用 GPT3.5。当然 GPT4 之类的也行，不过这些区别不大，就是配置里改一行代码的事。</p><h1 id="需要条件"><a href="#需要条件" class="headerlink" title="需要条件"></a>需要条件</h1><p>一台可以连接全世界互联网的并且能写代码的电脑（用 VPN 也行）</p><p>openai 账号，有 1$ 以上的余额</p><p>python 和命令行基础</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>首先我们需要下载一些库。使用 pip 下载，或者 pycharm 里设置 interpreter 下载也行。</p><h1 id="Chabot-代码"><a href="#Chabot-代码" class="headerlink" title="Chabot 代码"></a>Chabot 代码</h1><p>懒得把我的成品代码再扒开重新从一开始写了，直接参考文档吧。。。与其看我一大堆话不如直接看文档代码来的方便</p><p><a href="https://www.gradio.app/guides/creating-a-custom-chatbot-with-blocks">https://www.gradio.app/guides/creating-a-custom-chatbot-with-blocks</a></p><p>使用参考文档中的代码可以实现最基础的 chatbot，我直接贴上我的代码了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gptApi <span class="keyword">import</span> simple_text_api_character </span><br><span class="line"><span class="comment"># 下面一个模块，将调用接口部分的代码就是gptApi.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> t2a <span class="keyword">import</span> text2audio </span><br><span class="line"><span class="comment"># 这个是自定义的语音接口，函数形式如下：</span></span><br><span class="line"><span class="comment"># def text2audio(text):</span></span><br><span class="line"><span class="comment">#     return &quot;aaa.wav&quot;</span></span><br><span class="line"><span class="comment"># 我是加了一层语音合成，但是你可以直接返回一个wav文件就行。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">logName = <span class="string">&quot;Day &quot;</span> + <span class="built_in">str</span>(now)[:<span class="number">10</span>]</span><br><span class="line">logName += <span class="string">&#x27;.json&#x27;</span></span><br><span class="line"><span class="comment"># print(logName)</span></span><br><span class="line"></span><br><span class="line">logPath = <span class="string">&quot;./talkLog/&quot;</span> + logName</span><br><span class="line">loaded = &#123;&#125;</span><br><span class="line"></span><br><span class="line">WRITE_INTO_LOG = <span class="literal">True</span></span><br><span class="line">GENERATE_SOUND = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_from_text</span>(<span class="params">message</span>):</span><br><span class="line">    text = message;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        (<span class="literal">None</span>, api_audio(message=text, useTextApi=<span class="literal">False</span>)),</span><br><span class="line">        (<span class="literal">None</span>, format_respond_message(text)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_audio</span>(<span class="params">message</span>):</span><br><span class="line">    text = api_text(message=message)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        (<span class="literal">None</span>, api_audio(message=text, useTextApi=<span class="literal">False</span>)),</span><br><span class="line">        (<span class="literal">None</span>, format_respond_message(text)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        (<span class="literal">None</span>, api_image(message=message)),</span><br><span class="line">        (<span class="literal">None</span>, format_respond_message(message)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_text</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        (<span class="literal">None</span>, format_respond_message(api_text(message=message)))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_audio</span>(<span class="params">message, useTextApi = <span class="literal">True</span></span>):</span><br><span class="line">    text = message</span><br><span class="line">    <span class="keyword">if</span> useTextApi:</span><br><span class="line">        text = api_text(message=text)</span><br><span class="line">    audio_name = text2audio(text)</span><br><span class="line">    <span class="keyword">return</span> (audio_name,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_image</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;ri.png&quot;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_text</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># time.sleep(5)</span></span><br><span class="line">    <span class="comment"># return &quot;早上好！&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="keyword">return</span> simple_text_api_character(message=message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_respond_message</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;回复：<span class="subst">&#123;message&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">appendJson</span>(<span class="params">newContent</span>):</span><br><span class="line">    <span class="keyword">if</span> WRITE_INTO_LOG:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path=logPath):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logPath, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                loaded = json.load(f)</span><br><span class="line">                loaded.append(newContent)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            loaded = [newContent]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(logPath, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(loaded, f, ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> demo:</span><br><span class="line">    chatbot = gr.Chatbot()</span><br><span class="line">    msg = gr.Textbox()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">chat_history, message</span>):</span><br><span class="line">        <span class="built_in">print</span>(chat_history)</span><br><span class="line">        chat_history = chat_history + [(message, <span class="literal">None</span>)]</span><br><span class="line"></span><br><span class="line">        curTime = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">        newContent = &#123;<span class="string">&quot;content&quot;</span>: [[(message, <span class="literal">None</span>)]], <span class="string">&quot;send_type&quot;</span>: <span class="string">&quot;request&quot;</span>, <span class="string">&quot;send_time&quot;</span>: curTime&#125;</span><br><span class="line"></span><br><span class="line">        appendJson(newContent)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chat_history, message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">respond</span>(<span class="params">chat_history, message</span>):</span><br><span class="line"></span><br><span class="line">        interactOptions = [get_audio, get_image, get_text]</span><br><span class="line">        interactOptions = [get_audio]</span><br><span class="line">        interactOptions = [get_text]</span><br><span class="line">        <span class="keyword">if</span> GENERATE_SOUND:</span><br><span class="line">            interactOptions = [get_audio]</span><br><span class="line"></span><br><span class="line">        GENERATE_FROM_GIVEN_TXT = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message[:<span class="number">5</span>] == <span class="string">&quot;test:&quot;</span> :</span><br><span class="line">            GENERATE_FROM_GIVEN_TXT = <span class="literal">True</span></span><br><span class="line">            message = message[<span class="number">5</span>:]</span><br><span class="line">        <span class="comment"># print(message)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> GENERATE_FROM_GIVEN_TXT:</span><br><span class="line">            interactOptions = [generate_from_text]</span><br><span class="line"></span><br><span class="line">        resContent = random.choice(interactOptions)(message=message)</span><br><span class="line"></span><br><span class="line">        curTime = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line">        newContent = &#123;<span class="string">&quot;content&quot;</span>: [], <span class="string">&quot;send_type&quot;</span>: <span class="string">&quot;response&quot;</span>, <span class="string">&quot;send_time&quot;</span>: curTime&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pa <span class="keyword">in</span> resContent:</span><br><span class="line">            chat_history = chat_history + [pa]</span><br><span class="line">            newContent[<span class="string">&quot;content&quot;</span>] += [pa]</span><br><span class="line">            </span><br><span class="line">        appendJson(newContent=newContent)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> chat_history, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    msg.submit(request, [chatbot, msg], [chatbot, msg], show_progress=<span class="string">&#x27;hidden&#x27;</span>).then(</span><br><span class="line">        respond, inputs=[chatbot, msg], outputs=[chatbot, msg], show_progress=<span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">demo.launch(share=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，实际需要的代码比我的简单，我写这么多，除了 chatbot 外，还实现了额外的功能，比如日志系统，接口封装等等。但是我懒得重新写一遍简单版了，于是就直接复制过来了。。。</p><p>下一步写算法接口，实际上就是调用 openai 接口，查看 openai 官方文档和示例即可。</p><h1 id="远程接口调用"><a href="#远程接口调用" class="headerlink" title="远程接口调用"></a>远程接口调用</h1><p>python 发送请求可以用这个库，requests。</p><p>下面是我连接 gpt3.5 接口的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout.reconfigure(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用时记得开vpn,我的代理端口设置如下</span></span><br><span class="line">http_proxy  = <span class="string">&quot;http://127.0.0.1:33210&quot;</span></span><br><span class="line">https_proxy = <span class="string">&quot;http://127.0.0.1:33210&quot;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123; </span><br><span class="line">              <span class="string">&quot;http&quot;</span>  : http_proxy, </span><br><span class="line">              <span class="string">&quot;https&quot;</span> : https_proxy, </span><br><span class="line">              <span class="string">&quot;all_proxy&quot;</span>: <span class="string">&quot;socks5://127.0.0.1:33211&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连通性测试</span></span><br><span class="line"><span class="comment"># response = requests.get(&#x27;https://api.github.com&#x27;,</span></span><br><span class="line"><span class="comment">#                          proxies=proxies, </span></span><br><span class="line"><span class="comment">#                          verify=True,</span></span><br><span class="line"><span class="comment">#                          )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记得在系统环境变量里设置api key，具体查看openai的文档</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer &#x27;</span> + os.getenv(<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验prompt</span></span><br><span class="line"><span class="comment"># json_data = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;model&#x27;: &#x27;gpt-3.5-turbo&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;messages&#x27;: [</span></span><br><span class="line"><span class="comment">#         &#123;</span></span><br><span class="line"><span class="comment">#             &#x27;role&#x27;: &#x27;system&#x27;,</span></span><br><span class="line"><span class="comment">#             &#x27;content&#x27;: &quot;你需要扮演为一个可爱的猫娘，可以用可爱的语气和人对话&quot;</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#         &#123;</span></span><br><span class="line"><span class="comment">#             &#x27;role&#x27;: &#x27;user&#x27;,</span></span><br><span class="line"><span class="comment">#             &#x27;content&#x27;: &#x27;你好！&#x27;,</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#     ],</span></span><br><span class="line"><span class="comment">#     &#x27;temperature&#x27;: 0.7,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">character_temp_character</span>(<span class="params">message, character</span>):</span><br><span class="line">  json_template = &#123;</span><br><span class="line">    <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;gpt-3.5-turbo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;messages&#x27;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: <span class="string">f&quot;你需要扮演为一位<span class="subst">&#123;character[<span class="string">&#x27;role&#x27;</span>]&#125;</span>，会用<span class="subst">&#123;character[<span class="string">&#x27;nature&#x27;</span>]&#125;</span>的语气和我对话&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: <span class="string">f&quot;你的名字是助手A，简称为A，你是我的得力助手，帮我解决了很多问题&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: <span class="string">f&quot;你和我聊天时，可以用&#x27;XXX&#x27;称呼我&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;message&#125;</span>&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;temperature&#x27;</span>: <span class="number">0.7</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> json_template</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_text_api_character</span>(<span class="params">message, </span></span><br><span class="line"><span class="params">                              character = &#123;</span></span><br><span class="line"><span class="params">                                <span class="string">&quot;nature&quot;</span>: <span class="string">&quot;温和&quot;</span>,</span></span><br><span class="line"><span class="params">                                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;商业助手&quot;</span>,</span></span><br><span class="line"><span class="params">                                &#125;</span></span><br><span class="line"><span class="params">                              </span>):</span><br><span class="line">      </span><br><span class="line">  json_data = character_temp_character(message=message,character=character)</span><br><span class="line">  res = requests.post(<span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span>, </span><br><span class="line">                          headers=headers, </span><br><span class="line">                          json=json_data,</span><br><span class="line">                          proxies=proxies,</span><br><span class="line">                          verify=<span class="literal">False</span></span><br><span class="line">                          )</span><br><span class="line"></span><br><span class="line">  <span class="comment"># print(res)</span></span><br><span class="line">  <span class="comment"># print(res.json())</span></span><br><span class="line">  <span class="comment"># print(res.json()[&quot;choices&quot;][0][&quot;message&quot;][&quot;content&quot;])</span></span><br><span class="line">  <span class="keyword">return</span> res.json()[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;message&quot;</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中有几个注意点。</p><ol><li>如果是国内使用，会被 gfw 卡住。所以需要配置代理，具体的端口看你的 vpn 设置，比如 33210 是我的端口配置，你自己 vpn 什么端口你就要改成对应的</li><li>如果调用失败，可以试试用 request 做简单的 get，访问一些网站，看看是 openai 接口掉错了，还是网络问题导致的调用失败。</li><li>如果调用失败，还可以试试直接 bash（windows 用的 git bash）里 curl 一下 openai 的接口，如果没问题那就是代理没配好。</li><li>prompt 中是我们希望 chatbot 办理的角色</li></ol><p>#_, 启动！</p><p>在命令行中输入</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python launch.py</span><br></pre></td></tr></table></figure><p>（如果报错了可能是路径问题，cd 一下；或者不是 python 而是 python3 之类的）</p><p>然后出现了这样一个界面，就可以正常交流了。</p><p><img src="/img/U79VbOPSloo0gExs6kfcNx1unAd.png"></p><p>我改了下 prompt，并添加了语音合成功能。都不是很复杂！如果你对语音合成感兴趣，可以查一下 vits，然后自己训练模型就可以实时合成了。</p><p>视频演示在这里：<a href="https://www.bilibili.com/video/BV1QG411e7nQ/?spm_id_from=333.999.0.0">Demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> chatbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serum合成器基础1-振荡器</title>
      <link href="/2024/01/15/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%801-%E6%8C%AF%E8%8D%A1%E5%99%A8/"/>
      <url>/2024/01/15/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%801-%E6%8C%AF%E8%8D%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Serum合成器教程系列"><a href="#Serum合成器教程系列" class="headerlink" title="Serum合成器教程系列"></a>Serum合成器教程系列</h1><p>教程系列的介绍可以参考第一篇。</p><p>这篇文章中，我们介绍Serum中的振荡器，大部分的声音（除去sub和noise）都是靠着振荡器产生的。</p><h3 id="振荡器"><a href="#振荡器" class="headerlink" title="振荡器"></a>振荡器</h3><ol><li>鼠标停在 serum 某个按钮&#x2F;界面不动，等一会就会有提示这是什么</li><li>振荡器就是产生声音的，不同于传统合成器，更加“虚拟”。</li><li>lfo 名字里虽然带个振荡器，那是因为它过去真的是振荡器，但 serum 中的 lfo 并不是，而是一个让声音发生变化的东西，用数学思维看则是函数或者算子</li></ol><h3 id="波形表"><a href="#波形表" class="headerlink" title="波形表"></a>波形表</h3><ol><li>serum 中波形表 ui 介绍，可以按 &lt;&gt; 来方便选择波形</li><li>wt_pos 控制波形改变（2d 坐标）</li></ol><h3 id="音调控制"><a href="#音调控制" class="headerlink" title="音调控制"></a>音调控制</h3><ol><li>在一个 wavetable 中，一共有四个 node 可以调整 pitch：</li></ol><p>OCT SEM FIN CRS</p><p>分别对应着</p><p>音阶 半音 1% 半音 连续（单位：半音 - 1）</p><p>连续的配合 lfo 使用会挺不错</p><p>离散的也有 lfo 用法，比如那种机械科技电子感</p><h3 id="Unison-and-Detune"><a href="#Unison-and-Detune" class="headerlink" title="Unison and Detune"></a>Unison and Detune</h3><ol><li>unison 可用于丰富音色，而 detune 便是将几个同样的音稍微 detune 一下（从而扩充音域，就像交响乐里各种乐器调理论一样但因为乐器不同所以这一点不同反而可以扩充音色？）</li></ol><h3 id="Blend-Phase-and-Random"><a href="#Blend-Phase-and-Random" class="headerlink" title="Blend, Phase and Random"></a>Blend, Phase and Random</h3><ol><li>blend 便是 unison 不同音的混合模式，广和尖的感觉</li><li>phase 是音启动时间，random 是 phase 的随机值。单个音的 phase 变化基本听不出来，但比如说 unison 为 2，将 detune 设为 0，rand 拉到 100，那每次即使按同一个键，也会有不同的声音（当然差别也不是特别大）。这是因为音波的干涉</li><li>random 初始为 100 的可能原因：supersaw 就需要这样。比如说把 unison 拉到 16，那 random 如果为 0 听起来就会是很不自然的声音（当然也有其的用处），而把 random 拉大后 saw 声音更加自然</li></ol><h3 id="Wavetable-position"><a href="#Wavetable-position" class="headerlink" title="Wavetable position"></a>Wavetable position</h3><ol><li>通过改变 position，将不同的波形连续地变化，就像电影其实是由不同的帧组成，而本来是独立的元素拼在一起后能让人感觉是连续的（或许这也是 growl 可以作为 drop 中不同部分的转折与衔接的原因？就像来了个快速宏伟的大场面）</li></ol><h3 id="Warp-Pan-and-Level"><a href="#Warp-Pan-and-Level" class="headerlink" title="Warp, Pan and Level"></a>Warp, Pan and Level</h3><ol><li>warp 是对 wavetable 做变换，课程之后会详细介绍每一种（比如说波形复制，镜像，像素化等等）</li><li>pan 是改变左右音道</li><li>level 是音量</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Serum合成器基础0-介绍</title>
      <link href="/2024/01/08/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%800-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/01/08/Serum%E5%90%88%E6%88%90%E5%99%A8%E5%9F%BA%E7%A1%800-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Serum合成器教程系列"><a href="#Serum合成器教程系列" class="headerlink" title="Serum合成器教程系列"></a>Serum合成器教程系列</h1><p>本套教程主要参考Au5的Serum mastercourse，分享内容为Serum（血清）合成器的基础知识（各种按钮的含义），并不会过多涉及具体的声音塑造。</p><p>所以你可能会觉得这些内容看起来非常无聊——我完全可以理解，因为我自己看课的时候也这么觉得。但是有时候你确实需要花一些时间巩固基础，不然没有基础也看不懂各种神奇的音色的合成原理，而只会跟着教程捏Knob对长远发展意义不大…</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>serum 很有用，UI 也很好。</li><li>serum 以波形合成为主，同时包含了其他各种合成（减法，fm 等）</li><li>学习 serum 并不是一个简单的过程，哪怕课程的第一部分是在讲一些概念而非如何合成音色，大部分初学者也无法只看一遍视频便领悟原理。所以，不要为自己一遍看不懂而羞愧，这非常正常。（上面的是课程里的原话，实际上我自己深有体悟。第一遍看不懂非常正常）</li></ol><h3 id="SerumFx"><a href="#SerumFx" class="headerlink" title="SerumFx"></a>SerumFx</h3><ol><li>serum 和 serumFx 不是一个东西，后者是特效，可以拖到 audio 轨道上而 serum 不行。两者都可以拖到 midi track 上。也就是说，你可以试着拉十几个serumFx，把hyper拉满看看最后出来的会不会是什么深邃到极点的声音…</li></ol><h3 id="Wavetable-Synth"><a href="#Wavetable-Synth" class="headerlink" title="Ｗavetable Synth"></a>Ｗavetable Synth</h3><ol><li>wavetable 便是 sample 源，serum 支持自定义 wavetable，甚至可以拖一张图片进去（反正都是向量），这比类似的 massive 合成器要好</li><li>当然 serum 也支持减法合成，fm 合成等等</li></ol><h3 id="Presets"><a href="#Presets" class="headerlink" title="Presets"></a>Presets</h3><ol><li>类似存档点</li><li>自己做，改，保存成新的，这个过程据 au5 说对他帮助很大</li><li>不过实际上用自己的还是用别人的只是选择，只要自己用的开心就行，毕竟弹琴不需要当木匠造琴。不用别人的不是因为羞耻心，而是因为自己享受做音色的过程；时间等的投入也需要自己平衡。放弃无谓的自豪感。</li><li>可以参考他人 preset 作为灵感</li></ol><h2 id="核心总结"><a href="#核心总结" class="headerlink" title="核心总结"></a>核心总结</h2><ol><li>用Serum不过时，它依然是最好的电子音乐音色设计软件合成器之一。 （当然如果你囊中羞涩可以用免费的vital合成器，或者试试从一些qq群组找盗版serum…）</li><li>Serum学习并不简单，需要steady and slow的态度</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 电子音乐制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丽德轩博客介绍</title>
      <link href="/2023/11/04/%E4%B8%BD%E5%BE%B7%E8%BD%A9%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/11/04/%E4%B8%BD%E5%BE%B7%E8%BD%A9%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="丽德轩"><a href="#丽德轩" class="headerlink" title="丽德轩"></a>丽德轩</h1><h1 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h1><p>欢迎来到丽德轩，这是我分享各种有趣的知识或者日常的个人博客!</p><h2 id="在这个博客中，你可以学到："><a href="#在这个博客中，你可以学到：" class="headerlink" title="在这个博客中，你可以学到："></a>在这个博客中，你可以学到：</h2><p>制作能向全球提供服务，支持高并发的自定义商业&#x2F;个人网站；</p><p>和喜欢的虚拟角色实时语音聊天并让 TA 唱歌给你听；</p><p>按照心中所想的构图自由高效创作精美绘画；</p><p>使用 3D 建模软件给动画角色模型换头&#x2F;衣装；</p><p>使用各种 Shader 实现动画&#x2F;现实风格的 3D 动画；</p><p>让你拥有近乎绝对音感，扒谱无敌的音感训练技巧；</p><p>用减法合成器生成各种动物的声音，以及高效驱蚊的 bass 声；</p><p>以正常玩家的身份在 MC PVP 中击杀队伍联合的无敌飞行挂；</p><p>用一天时间在 MC 中建造一座建筑迥异的属于你的大城市；</p><p>……</p><h2 id="你也可以看到许多有趣的分享："><a href="#你也可以看到许多有趣的分享：" class="headerlink" title="你也可以看到许多有趣的分享："></a>你也可以看到许多有趣的分享：</h2><p>我的痛并快乐着的转码之路和心理历程；</p><p>我的十几个国家的旅游经历；</p><p>我为什么会爱上 Melodic Dubstep；</p><p>我的 3000+ 游戏时长的具体分布；</p><p>竞赛和高考相关的升学之路的感悟；</p><p>……</p><p>当然，你阅读的时候，可能我的博客还没有太多的文章。这是因为我平时也比较忙，特别是最近几年正处于先苦一苦的阶段。不过，我会坚持发完的。</p><h1 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h1><p>我是清华大学的一名在读本科生，即将去美国读硕士。</p><p>我对许多领域都充满了兴趣且有所尝试，包括但不限于软件开发，AI 应用，动画，音乐，游戏，阅读等。</p><p>我的联系方式：</p><p><a href="mailto:&#x64;&#x69;&#114;&#x61;&#x73;&#57;&#x35;&#49;&#48;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x64;&#x69;&#114;&#x61;&#x73;&#57;&#x35;&#49;&#48;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客介绍 推荐阅读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
